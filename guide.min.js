'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* global $ */

var Model = function () {
  function Model() {
    _classCallCheck(this, Model);

    this.hidden = true;
    this.listeners = [];
  }

  _createClass(Model, [{
    key: 'setState',
    value: function setState(key, value) {
      this[key] = value;
      this.notify();
    }
  }, {
    key: 'attach',
    value: function attach(listener) {
      this.listeners.push(listener);
    }
  }, {
    key: 'notify',
    value: function notify() {
      this.listeners.forEach(function (listener) {
        return listener();
      });
    }
  }]);

  return Model;
}();

var ViewModel = function () {
  function ViewModel(model) {
    _classCallCheck(this, ViewModel);

    this.model = model;
    this.model.attach(this.update.bind(this));

    this.appendHTML();

    // DOM references
    this.$root = document.querySelector('#guide');
    this.$toggle = document.querySelector('#guide-toggle');
    this.$back = document.querySelector('#guide #back');
    this.$choices = document.querySelectorAll('#guide h1.choice');

    this.moveGrids();

    this.$grids = document.querySelectorAll('#guide .uber-grid-wrapper');
    this.$intro = document.querySelector('#guide #intro');

    // Event listeners
    window.addEventListener('hashchange', this.onHashChange.bind(this));
    this.$toggle.addEventListener('click', this.onToggleClick.bind(this));
    this.$back.addEventListener('click', this.onBackClick.bind(this));
    for (var i = 0; i < this.$choices.length; i++) {
      this.$choices[i].addEventListener('click', this.onChoiceClick.bind(this));
    }
  }

  _createClass(ViewModel, [{
    key: 'appendHTML',
    value: function appendHTML() {
      var html = '<div id="guide-toggle"></div>\n    <div id="guide">\n      <h1 id="intro">Maak uw keuze</h1>\n      <div id="heading-container">\n        <button id="back"></button>\n        <h1 class="choice" id="17262">Groepen</h1>\n        <h1 class="choice" id="17269">Individueel</h1>\n      </div>\n\n    </div>';
      document.body.insertAdjacentHTML('afterbegin', html);
    }
  }, {
    key: 'moveGrids',
    value: function moveGrids() {
      var grids = document.querySelectorAll('.uber-grid-wrapper');
      for (var i = 0; i < grids.length; i++) {
        if (grids[i].getAttribute('data-slug').includes('guide')) this.$root.appendChild(grids[i]);
      }
    }
  }, {
    key: 'onToggleClick',
    value: function onToggleClick() {
      this.model.setState('hidden', !this.model.hidden);
      location.hash = '';
    }
  }, {
    key: 'onChoiceClick',
    value: function onChoiceClick(event) {
      location.hash = event.target.getAttribute('id');
    }
  }, {
    key: 'onBackClick',
    value: function onBackClick() {
      history.back();
    }
  }, {
    key: 'onHashChange',
    value: function onHashChange() {
      this.update();
    }
  }, {
    key: 'update',
    value: function update() {
      // Show/hide grids based on their slug's occurence in location.hash
      for (var i = 0; i < this.$grids.length; i++) {
        var id = this.$grids[i].getAttribute('id').replace('uber-grid-wrapper-', '');
        var hidden = !location.hash.includes(id);
        if (hidden) {
          $(this.$grids[i]).velocity({ opacity: 0, height: 0 });
          this.$grids[i].style.zIndex = 998;
        } else {
          $(this.$grids[i]).velocity({ opacity: 1, height: 'auto' });
          this.$grids[i].style.zIndex = 999;
        }
      }
      // Show/hide the #intro based on the content of location.hash
      if (location.hash !== '') {
        $(this.$intro).velocity({ opacity: 0, height: 0, marginTop: 0 });
        $(this.$back).velocity({ opacity: 1, height: 'auto', marginTop: 300 });
      } else {
        $(this.$back).velocity({ opacity: 0, height: 0, marginTop: 0 });
        $(this.$intro).velocity({ opacity: 1, height: 'auto', marginTop: 300 });
      }

      // Show/hide the #guide based on model.hidden
      if (this.model.hidden) $(this.$root).velocity({ scale: 0, opacity: 0, translateY: -100 }, { duration: 100 });else $(this.$root).velocity({ scale: 1, opacity: 1, translateY: 0 }, { duration: 100 });

      // Set first choice active based on location.hash
      for (var _i = 0; _i < this.$choices.length; _i++) {
        this.$choices[_i].classList.toggle('active', location.hash.includes(this.$choices[_i].getAttribute('id')));
      }
    }
  }]);

  return ViewModel;
}();

if (!window.$) window.$ = window.jQuery;

window.onload = function () {
  return new ViewModel(new Model());
};
